jQuery(document).ready(function() {
  if ($("#ctrllr-notes").length > 0){
    if($("#notes-edit").length > 0){   
      var container_folder = {id:"#folder_id", text: "#folder_text"};
      var url_find_receipt = $("#entities_to_ids").data("url");
      var real_input_token_from = "#token-input-entities_from_ids";
      var real_input_token_to = "#token-input-entities_to_ids";
      var temp_id_recipient = -10;
      var temp_id_sender = -20;

      var tempEntity = function(field_id){
        this.field_id = "#"+field_id;
        this.id = -1;
        this.data = [];
        this.separator = '&';
        this.add = function(value){
          var key = this.id.toString();
          this.data[key] =  value;
          var simulateEntity = {
                  id: this.id,
                  person: {id: this.id, firstname: value, lastname: ""}
          }
          this.id--;
          this._draw();
          return simulateEntity;
        };
        this.del = function(id){
          var key = id.toString();
          delete this.data[key]
          this._draw();
        };
        this._draw = function(){
          var names = "";
          for(var key in this.data){
            if(names.length > 0)
              names += this.separator;
            names += this.data[key];
          }
          $(this.field_id).val(names);
        };
        this.preload = function(token_input, data){
          var custom_data = data;
          if(custom_data == undefined)
            custom_data = $(this.field_id).val();
          if(custom_data.length > 0){
            var names = custom_data.split(this.separator);
            for(var i = 0; i < names.length; i++){
              $(token_input).tokenInput("add", this.add(names[i]));
            }
          }
        };
      }
      var tempTo = new tempEntity("recipient_text");
      $("#entities_to_ids").tokenInput(url_find_receipt, {
        theme: 'facebook',
        //prePopulate: $("#entities_to_ids").data("pre"),
        preventDuplicates: true,
        minChars: "3",
        resultsFormatter: function(entity){
          var e = new EntityJson(entity);          
          return "<li> <p style='color: black' >" + e.fullEntityName() + " </p> </li>"; 
        },
        tokenFormatter: function(entity) {
          var e = new EntityJson(entity);          
          return "<li><p>" + e.fullEntityName().substring(0,40) + "</p> </li>" 
        },
        onDelete: function(item){
          if (item.id < 0)
              tempTo.del(item.id);
        },
        noResultsText: "<%= I18n.t('token_input.noResultsText') %>",
        hintText: "<%= I18n.t('token_input.hintText')%>",
        searchigText: "<%= I18n.t('token_input.searching_text')%>",              
      });
      $("#token-input-entities_to_ids").on("keyup", function(e){
        if(e.keyCode==9){
          //$("#token-input-entities_from_ids").focus();
          $("#note_description").focus();
        }
        else if (e.keyCode == 45){
          var name = $("#token-input-entities_to_ids").val();
          if(name.length > 0){
            var simulateEntity = tempTo.add(name);
            $("#entities_to_ids").tokenInput("add", simulateEntity);
          }
        }
      });
      
      var tempFrom = new tempEntity("sender_text");
      var url_find_sender = $("#entities_from_ids").data("url");
      $("#entities_from_ids").tokenInput(url_find_sender, {
        theme: 'facebook',
        //tokenLimit: "1",
        preventDuplicates: true,
        minChars: "3",
        resultsFormatter: function(entity){
          var e = new EntityJson(entity);          
          return "<li> <p style='color: black' >" + e.fullEntityName() + " </p> </li>"; 
        },
        tokenFormatter: function(entity) {
          var e = new EntityJson(entity);          
          return "<li><p>" + e.fullEntityName().substring(0,40) + "</p> </li>" 
        },
        onDelete: function(item){
          if (item.id < 0)
              tempFrom.del(item.id);
        },

        noResultsText: "<%= I18n.t('token_input.noResultsText') %>",
        hintText: "<%= I18n.t('token_input.hintText')%>",
        searchigText: "<%= I18n.t('token_input.searching_text')%>",              
      });
      $("#token-input-entities_from_ids").on("keyup", function(e){
        if(e.keyCode == 9){          
          $("#token-input-entities_to_ids").focus();
        }
        else if (e.keyCode == 45){
          var name = $("#token-input-entities_from_ids").val();
          if(name.length > 0){
            var simulateEntity = tempFrom.add(name);
            $("#entities_from_ids").tokenInput("add", simulateEntity);
          }
        }
      });
          
      
      /*Seleccion de carpeta*/
      $("#folder-tree").fancytree({
        lazy: true,
        expanded: true,
        //checkbox: true,
        selectMode: 1,
        source: $.ajax({
          url: "/folders",
          dataType: "json"
        }),
        lazyLoad: function(event, data){
          var node = data.node;
          // Issue an ajax request to load child nodes
          data.result = {
            url: "/folders.json",
            data: {id: node.key}
          }
        },
        activate: function(event, data) {
          if(data.node.folder){
            $(container_folder.id).val(data.node.key); 
            var parents = data.node.getParentList();
            var p = "";
            for(var i = 1; i < parents.length; i++){
              p += '<li> <span class="divider"></span>';
              p += parents[i].title + '</li>';
            }
            p += '<li> <span class="divider"></span>';
            p += data.node.title + '</li>';
            $(container_folder.text).html(p);
          }
        },
      });

      //si es edit y tiene recipients mostrarlo
      var d = $("#entities_to_ids").data("select");
      if(d){
        for(var i = 0; i < d.length; i++)
          $("#entities_to_ids").tokenInput("add",new EntityJson(d[i]));
      }

      //si es edit y tiene senders mostrarlo      
      d = $("#entities_from_ids").data("select");
      if(d){
        for(var i = 0; i < d.length; i++)
          $("#entities_from_ids").tokenInput("add",new EntityJson(d[i]));
      }
   
      /*=> Preload sender_text and recipient_text*/
      tempFrom.preload("#entities_from_ids");
      tempTo.preload("#entities_to_ids");
      /*<= Preload sender_text and recipient_text*/
    }

    /*#######################################################
      ####################  LISTAR NOTAS          ###########
      #######################################################*/
    if ($("#note-index").length > 0){
      var table = $('#note-index-table').dataTable({
        "processing": true,
        "serverSide": true,
        "ajax": $('#note-index-table').data('source'),
        "pagingType": "full_numbers",
         aoColumnDefs: [{ 'bSortable': false, 'aTargets': [  1, 2, 4, 5 ] }],
        language: {
            url: "/datatables/spanish.txt",
        }
      });
    }

    /*#######################################################
      ####################  SHOW NOTA          ###########
      #######################################################*/
    if ($("#note-show").length > 0){

      var Event = function(){
        var el = this;
        this.f = {open_new_event: "#open_new_event",
                  document_id: "#document_id",
                  event_modal: "#note_event_modal",
                  event_remote_container: "#event-remote-form",
                  event_empty: "#event_empty",
                  event_form: "#id-form_event",
                  event_save: "#event-save",
                  event_list: "#list-events"
                 };
        this.documentId = function(){return $(this.f.document_id).val()};
        this.draw = function(data){
          var li = '<li class="list-group-item" id="event_' + data.id + '">';
          li += '<div class="row"><div class="col-md-1"><span class="label label-default">';
          li += data.dateEs();
          li += '</span></div><div class="col-md-9">'
          li += data.description;
          li += '</div><div class="col-md-2">';
          li += "TÃº";
          li += '</div></div></li>';
          $(el.f.event_list).append(li);
          
        };
        this._openModal = function() {
          var el = this;
          $.ajax({
              type: "GET",
              url: "/events/new",
              data: {event: {document_id: el.documentId()}},
              dataType: "html",
              success: function(data){
                $(el.f.event_remote_container).html(data);
                $(el.f.event_modal).modal();
                setTimeout(function (){
                  var elem = $(el.f.event_form).find('input[type=text],textarea,select').filter(':visible:first')
                  elem.focus();
                }, 800);
                return false;
              },
              error: function(xhr, event, status) {
                var errors = jQuery.parseJSON(xhr.responseText);
                showError(errors);
                return false;
              }
          });
        };


        /*******************************************
          Codigo que se ejecuta al cargar la pagina
         *******************************************/
        /*On click button open new event for current note*/
        $(el.f.open_new_event).on("click",function(){
          el._openModal();
        });
        /*
         * ON PRESS BUTTON SAVE EVENT
        */
        $(el.f.event_save).on("click",function(){
          var valid = $(el.f.event_form).parsley().validate();
          if ( ! valid )
            return false;
          
          var form_data = $(el.f.event_form).serialize();
          $.ajax({
                type: "POST",
                url: "/events",
                data: form_data,
                dataType: "json",
                success: function(data){
                  /* remove empty event message */
                  $(el.f.event_empty).remove();
                  /* draw event */
                  el.draw(new EventJson(data));
                  $(el.f.event_modal).modal("hide");
                  return false;
                },
                error: function(xhr, event, status) {
                  var errors = jQuery.parseJSON(xhr.responseText);
                  showError(errors);
                  return false;
                }
          });
        });
      }();
    }
  }
});
