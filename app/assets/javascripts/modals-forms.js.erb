jQuery(document).ready(function() {
  if($("#modal-forms").length > 0){
    /*
    ** INICIO formulario nuevos cargos
    */
    if($("#modal-forms").length > 0){
      ModalEmployment = {
        container: {root: '#modal-forms-employment', modal: '#modal-employment', 
                    content: "#employment-remote-form", form: '#id-form_employment',
                    error_msg: "#remote-error-message"},
        buttons: {save: '#employment-save'},
        save: function(){
          var el = this;
          var valid = $(el.container.form).parsley().validate();
          if ( ! valid )
            return false;
          var form_data = $(el.container.form).serialize();
          $.ajax({
                type: "POST",
                url: "/employments",
                data: form_data,
                dataType: "json",
                success: function(data){
                  showMessage("<%= I18n.t('messages.success.save_employment')%>", el.container.error_msg);
                  el._clear();
                  return false;
                },
                error: function(xhr, event, status) {
                  var errors = jQuery.parseJSON(xhr.responseText);
                  showError(errors, el.container.error_msg);
                  return false;
                }
          });
          $(el.container.root).find('input[type=text],textarea,select').filter(':visible:first').focus();
        },
        _clear: function(){
          $(this.container.form).each(function(){this.reset()});
          //$(this.container.form + " input[type=text], " + this.container.form + " textarea").each(function(){this.val("");});
        },
        init: function(){
          $(this.buttons.save).on('click', function(){
            ModalEmployment.save();
          });
        },
      };// End of ModalEmployment

      ModalMasterUnit = {
        container: {root: '#modal-forms-master_unit', modal: '#modal-master_unit', 
                    content: "#master_unit-remote-form", form: '#id-form_master_unit',
                    error_msg: "#remote-error-message"},
        buttons: {open: '#btn-open-new-master_unit', save: '#master_unit-save'},

        save: function(){
          var el = this;
          var valid = $(el.container.form).parsley().validate();
          if ( ! valid )
            return false;
          var form_data = $(el.container.form).serialize();
          $.ajax({
                type: "POST",
                url: "/master_units",
                data: form_data,
                dataType: "json",
                success: function(data){
                  showMessage("<%= I18n.t('messages.success.save_master_unit')%>", el.container.error_msg);
                  el._clear();
                  return false;
                },
                error: function(xhr, event, status) {
                  var errors = jQuery.parseJSON(xhr.responseText);
                  showError(errors, el.container.error_msg);
                  return false;
                }
          });
          $(el.container.root).find('input[type=text],textarea,select').filter(':visible:first').focus();
        },
        _clear: function(){
          $(this.container.form).each(function(){this.reset()});
        },
        init: function(){
          $(this.buttons.save).on('click', function(){
            ModalMasterUnit.save();
          });
        },
      };// End of ModalMasterUnit
      
      ModalDependency = {
        container: {root: '#modal-forms-dependency', modal: '#modal-dependency', 
                    content: "#dependency-remote-form", form: '#id-form_dependency',
                    error_msg: "#remote-error-message"},
        buttons: {open: '#btn-open-new-dependency', save: '#dependency-save'},
        
        save: function(){
          var el = this;
          var valid = $(el.container.form).parsley().validate();
          if ( ! valid )
            return false;
          var form_data = $(el.container.form).serialize();
          $.ajax({
                type: "POST",
                url: "/dependencies",
                data: form_data,
                dataType: "json",
                success: function(data){
                  showMessage("<%= I18n.t('messages.success.save_dependency')%>", el.container.error_msg);
                  el._clear();
                  return false;
                },
                error: function(xhr, event, status) {
                  var errors = jQuery.parseJSON(xhr.responseText);
                  showError(errors, el.container.error_msg);
                  return false;
                }
          });
          $(el.container.root).find('input[type=text],textarea,select').filter(':visible:first').focus();
        },
        _bind_tkinp_parent_dependency: function(){
          var data_dep  = $("#parent_id").data("prepopulate");
          $("#parent_id").tokenInput('/dependencies.json', {
            theme: 'facebook',
            tokenLimit: "1",
            minChars: "3",
            zindex: 9999,
            prePopulate: data_dep,
            resultsFormatter: function(dependency){
              var compleName = dependency.name + " (" + dependency.description + ")";
              return "<li> <p style='color: black' >" + compleName + " </p> </li>"; 
            },
            tokenFormatter: function(dependency) {
              if (dependency == null) return "";
              return "<li><p>" + dependency.name + " (" + dependency.description.substring(0,20) + ") </p> </li>" 
            },
            noResultsText: "<%= I18n.t('token_input.noResultsText') %>",
            hintText: "<%= I18n.t('token_input.hintText')%>",
            searchigText: "<%= I18n.t('token_input.searching_text')%>",
            onAdd: function(data){
              $("#token-input-master_unit_id").focus();
            },
            onDelete: function(data){
            }
          });
          $("#token-input-parent_id").on("keyup", function(e){
            if(e.keyCode == 9){          
              $("#token-input-master_unit_id").focus();
            }
          });
        },
        _bind_tkinp_master_unit: function(){
          var el = this;
          var data_mu  = $("#master_unit_id").data("prepopulate");
          $("#master_unit_id").tokenInput('/master_units.json', {
            theme: 'facebook',
            zindex: 9999,
            tokenLimit: "1",
            minChars: "3",
            prePopulate: data_mu,
            resultsFormatter: function(master_unit){
              var compleName = master_unit.name;
              return "<li> <p style='color: black' >" + compleName + " </p> </li>"; 
            },
            tokenFormatter: function(master_unit) {
              if (master_unit == null) return "";
              return "<li><p>" + master_unit.name+ " </p> </li>" 
            },
            noResultsText: "<%= I18n.t('token_input.noResultsText') %>",
            hintText: "<%= I18n.t('token_input.hintText')%>",
            searchigText: "<%= I18n.t('token_input.searching_text')%>",
            onAdd: function(data){
              $(el.buttons.save).focus();
            },
            onDelete: function(data){
            }
          });
          $("#token-input-master_unit_id").on("keyup", function(e){
            if(e.keyCode == 9){          
              $(el.buttons.save).focus();
            }
          });
        },
        _clear: function(){
          $(this.container.form).each(function(){this.reset()});
          $("#parent_id").tokenInput("clear");
          $("#master_unit_id").tokenInput("clear");
        },
        init: function(){
          // $(this.buttons.open).on('click', function(){ModalDependency.openModal();});
          this._bind_tkinp_parent_dependency();
          this._bind_tkinp_master_unit();
          $(this.buttons.save).on('click', function(){
            ModalDependency.save();
          });

        },
      };// End of ModalDependency
      
      ModalPerson = {
        container: {root: '#modal-forms-person', modal: '#modal-person', 
                    content: "#person-remote-form", form: '#id-form_person',
                    error_msg: "#remote-error-message"},
        buttons: {open: '#btn-open-new-person', save: '#person-save'},
        
        save: function(){
          var el = this;
          var valid = $(el.container.form).parsley().validate();
          if ( ! valid )
            return false;
          var form_data = $(el.container.form).serialize();
          $.ajax({
                type: "POST",
                url: "/people",
                data: form_data,
                dataType: "json",
                success: function(data){
                  showMessage("<%= I18n.t('messages.success.save_person')%>", el.container.error_msg);
                  el._clear();
                  return false;
                },
                error: function(xhr, event, status) {
                  var errors = jQuery.parseJSON(xhr.responseText);
                  showError(errors, el.container.error_msg);
                  return false;
                }
          });
          $(el.container.root).find('input[type=text],textarea,select').filter(':visible:first').focus();
        },
        _bind_tkinp_dependency: function(){
          var data_dep  = $("#person_dependency_id").data("prepopulate");
          $("#person_dependency_id").tokenInput('/dependencies.json', {
            theme: 'facebook',
            tokenLimit: "1",
            minChars: "3",
            zindex: 9999,
            prePopulate: data_dep,
            resultsFormatter: function(dependency){
              var compleName = dependency.name + " (" + dependency.description + ")";
              return "<li> <p style='color: black' >" + compleName + " </p> </li>"; 
            },
            tokenFormatter: function(dependency) {
              if (dependency == null) return "";
              return "<li><p>" + dependency.name + " (" + dependency.description.substring(0,20) + ") </p> </li>" 
            },
            noResultsText: "<%= I18n.t('token_input.noResultsText') %>",
            hintText: "<%= I18n.t('token_input.hintText')%>",
            searchigText: "<%= I18n.t('token_input.searching_text')%>",
            onAdd: function(data){
              $("#token-input-person_employment_id").focus();
            },
            onDelete: function(data){
            }
          });
          
          $("#token-input-person_dependency_id").on("keyup", function(e){
            if(e.keyCode == 9){          
              $("#token-input-person_employment_id").focus();
            }
          });
        },
        _bind_tkinp_employment: function(){
          var el = this;
          var data_mu  = $("#person_employment_id").data("prepopulate");
          $("#person_employment_id").tokenInput('/employments.json', {
            theme: 'facebook',
            zindex: 9999,
            tokenLimit: "1",
            minChars: "3",
            prePopulate: data_mu,
            resultsFormatter: function(employment){
              var compleName = employment.name;
              return "<li> <p style='color: black' >" + compleName + " </p> </li>"; 
            },
            tokenFormatter: function(employment) {
              if (employment == null) return "";
              return "<li><p>" + employment.name+ " </p> </li>" 
            },
            noResultsText: "<%= I18n.t('token_input.noResultsText') %>",
            hintText: "<%= I18n.t('token_input.hintText')%>",
            searchigText: "<%= I18n.t('token_input.searching_text')%>",
            onAdd: function(data){
              //el.draw(new CustomerJson(data));
              $(el.buttons.save).focus();
            },
            onDelete: function(data){
              // el.clear();
            }
          });
          $("#token-input-person_employment_id").on("keyup", function(e){
            if(e.keyCode == 9){          
              $(el.buttons.save).focus();
            }
          });
        },
        _clear: function(){
          $(this.container.form).each(function(){this.reset()});
          $("#person_dependency_id").tokenInput("clear");
          $("#person_employment_id").tokenInput("clear");
        },
        init: function(){
          // $(this.buttons.open).on('click', function(){ModalPerson.openModal();});
          this._bind_tkinp_dependency();
          this._bind_tkinp_employment();
          $(this.buttons.save).on('click', function(){
            ModalPerson.save();
          });

        },
      };// End of ModalPerson

      ModalEntity = {
        container: {root: '#modal-forms-entity', modal: '#modal-entity', 
                    content: "#entity-remote-form", form: '#id-form_entity',
                    error_msg: "#remote-error-message"},
        buttons: {open: '#btn-open-new-entity', save: '#entity-save'},
        is_load_html: false,
        openModal: function (){
          var el = this;
          if(!el.is_load_html){
            $.ajax({
                type: "GET",
                url: "/entities/new",
                dataType: "html",
                success: function(data){
                  $(el.container.content).html(data);
                  el._bind_tkinp_person();
                  el._bind_tkinp_dependency();
                  el._bind_tkinp_employment();
                  ModalEmployment.init();
                  ModalMasterUnit.init();
                  ModalDependency.init();
                  ModalPerson.init();
                  el._bind_button();
                  el._focus();
                  $(el.container.modal).modal();
                  el.clear();
                  setTimeout(function (){
                    var elem = $(el.container.root).find('input[type=text],textarea,select').filter(':visible:first')
                    elem.focus();
                  }, 800);
                  el.is_load_html = true;
                  return false;
                },
                error: function(xhr, event, status) {
                  var errors = jQuery.parseJSON(xhr.responseText);
                  showError(errors);
                  return false;
                }
            });
          }
          else{
            el.clear();
            $(el.container.modal).modal();
            setTimeout(function (){
              var elem = $(el.container.root).find('input[type=text],textarea,select').filter(':visible:first')
              elem.focus();
            }, 800);
          }
        },
        closeModal: function(){
          $(this.container.modal).modal('hide');
        },
        save: function(){
          var el = this;
          var valid = $(el.container.form).parsley().validate();
          if ( ! valid )
            return false;
          
          var form_data = $(el.container.form).serialize();
          $.ajax({
                type: "POST",
                url: "/entities",
                data: form_data,
                dataType: "json",
                success: function(data){
                  showMessage("<%= I18n.t('messages.success.save_entity')%>", el.container.error_msg);
                  el._clear();
                  return false;
                },
                error: function(xhr, event, status) {
                  var errors = jQuery.parseJSON(xhr.responseText);
                  showError(errors, el.container.error_msg);
                  return false;
                }
          });
          $(el.container.root).find('input[type=text],textarea,select').filter(':visible:first').focus();
        },
        _bind_tkinp_person: function(){
          var data_mu  = $("#entity_person_id").data("prepopulate");
          $("#entity_person_id").tokenInput('/people.json', {
            theme: 'facebook',
            zindex: 9999,
            tokenLimit: "1",
            minChars: "3",
            prePopulate: data_mu,
            resultsFormatter: function(person){
              var compleName = person.fullname;
              return "<li> <p style='color: black' >" + compleName + " </p> </li>"; 
            },
            tokenFormatter: function(person) {
              if (person == null) return "";
              return "<li><p>" + person.fullname+ " </p> </li>" 
            },
            noResultsText: "<%= I18n.t('token_input.noResultsText') %>",
            hintText: "<%= I18n.t('token_input.hintText')%>",
            searchigText: "<%= I18n.t('token_input.searching_text')%>",
            onAdd: function(data){
              //el.draw(new CustomerJson(data));
              $("#token-input-entity_dependency_id").focus();
            },
            onDelete: function(data){
              // el.clear();
            }
          });
        },
        _bind_tkinp_dependency: function(){
          var data_dep  = $("#entity_dependency_id").data("prepopulate");
          $("#entity_dependency_id").tokenInput('/dependencies.json', {
            theme: 'facebook',
            tokenLimit: "1",
            minChars: "3",
            zindex: 9999,
            prePopulate: data_dep,
            resultsFormatter: function(dependency){
              var compleName = dependency.name + " (" + dependency.description + ")";
              return "<li> <p style='color: black' >" + compleName + " </p> </li>"; 
            },
            tokenFormatter: function(dependency) {
              if (dependency == null) return "";
              return "<li><p>" + dependency.name + " (" + dependency.description.substring(0,20) + ") </p> </li>" 
            },
            noResultsText: "<%= I18n.t('token_input.noResultsText') %>",
            hintText: "<%= I18n.t('token_input.hintText')%>",
            searchigText: "<%= I18n.t('token_input.searching_text')%>",
            onAdd: function(data){
              //el.draw(new CustomerJson(data));
              $("#token-input-entity_employment_id").focus();
            },
            onDelete: function(data){
              // el.clear();
            }
          });
        },
        _bind_tkinp_employment: function(){
          var data_mu  = $("#entity_employment_id").data("prepopulate");
          $("#entity_employment_id").tokenInput('/employments.json', {
            theme: 'facebook',
            zindex: 9999,
            tokenLimit: "1",
            minChars: "3",
            prePopulate: data_mu,
            resultsFormatter: function(employment){
              var compleName = employment.name;
              return "<li> <p style='color: black' >" + compleName + " </p> </li>"; 
            },
            tokenFormatter: function(employment) {
              if (employment == null) return "";
              return "<li><p>" + employment.name+ " </p> </li>" 
            },
            noResultsText: "<%= I18n.t('token_input.noResultsText') %>",
            hintText: "<%= I18n.t('token_input.hintText')%>",
            searchigText: "<%= I18n.t('token_input.searching_text')%>",
            onAdd: function(data){
              //el.draw(new CustomerJson(data));
              $("#entity-save").focus();
            },
            onDelete: function(data){
              // el.clear();
            }
          });
        },
        _bind_button: function(){
          $(this.buttons.save).on('click', function(){
            ModalEntity.save();
          });
        },
        _clear: function(){
          $(this.container.form).each(function(){this.reset()});
          $("#entity_person_id").tokenInput("clear");
          $("#entity_dependency_id").tokenInput("clear");
          $("#entity_employment_id").tokenInput("clear");
        },
        _focus: function(){
          $("#token-input-entity_person_id").on("keyup", function(e){
            if(e.keyCode == 9){          
              $("#token-input-entity_dependency_id").focus();
            }
          });
          $("#token-input-entity_dependency_id").on("keyup", function(e){
            if(e.keyCode == 9){          
              $("#token-input-entity_employment_id").focus();
            }
          });
          $("#token-input-entity_employment_id").on("keyup", function(e){
            if(e.keyCode == 9){          
              $("#entity-save").focus();
            }
          });
        },
        clear: function(){
          $("#entity_person_id").tokenInput("clear");
          $("#entity_dependency_id").tokenInput("clear");
          $("#entity_employment_id").tokenInput("clear");
          removeError(this.container.error);

        },
        init: function(){
          $(this.buttons.open).on('click', function(){ModalEntity.openModal();});
          
        },
      };// End of ModalEntity
      // ModalEmployment.init();
      // ModalMasterUnit.init();
      // ModalDependency.init();
      // ModalPerson.init();
      ModalEntity.init();
    }
    /*** FIN formulario nuevos cargos ***/
  }
});
